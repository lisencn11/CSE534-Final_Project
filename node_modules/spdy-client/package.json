{
  "_args": [
    [
      "spdy-client",
      "/Users/senli/Documents/CSE534FP"
    ]
  ],
  "_from": "spdy-client@latest",
  "_id": "spdy-client@1.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/spdy-client",
  "_npmUser": {
    "email": "wpc009@gmail.com",
    "name": "wpc009"
  },
  "_npmVersion": "1.3.2",
  "_phantomChildren": {},
  "_requested": {
    "name": "spdy-client",
    "raw": "spdy-client",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/spdy-client/-/spdy-client-1.0.3.tgz",
  "_shasum": "29841648fc5e10957f2bdac100a8752e49cfb77e",
  "_shrinkwrap": null,
  "_spec": "spdy-client",
  "_where": "/Users/senli/Documents/CSE534FP",
  "author": {
    "name": "nasss@github.com"
  },
  "bugs": {
    "url": "https://github.com/wpc009/spdy-client/issues"
  },
  "dependencies": {
    "log4js": "~0.6.9",
    "spdy-v3": "1.2.1",
    "util": "~0.4.9"
  },
  "description": "spdy-client ===========",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "29841648fc5e10957f2bdac100a8752e49cfb77e",
    "tarball": "https://registry.npmjs.org/spdy-client/-/spdy-client-1.0.3.tgz"
  },
  "homepage": "https://github.com/wpc009/spdy-client#readme",
  "license": "BSD",
  "main": "client.js",
  "maintainers": [
    {
      "email": "wpc009@gmail.com",
      "name": "wpc009"
    }
  ],
  "name": "spdy-client",
  "optionalDependencies": {},
  "readme": "spdy-client\n===========\n\nWith this module, you can create SPDY clients in node.js. You can send requests to the SPDY server and add listeners for response or data events.\n\nYou need node-spdy module : https://github.com/indutny/node-spdy\n\nUsage\n===========\n\nPOST request example :\n```javascript\nvar client = require('client');\n\nvar req = client.post(\n                      {\n      \t                path : '/',\n                       \tport: 4000,\n                        host: 'localhost',\n                        //plain : true // USE plain tcp connection, TLS otherwise\n                        headers: {\n\t\t\t                      'Content-Type': 'text/plain',\n\t\t\t                      'Content-Length': 9\n                               }\n                      },\n                      function(response){\n                        response.on('data', function (chunk) {\n                            \tvar data = String.fromCharCode.apply(null, new Uint16Array(chunk));\n                        \tlogger.info(data);\n                      \t\t});\t\t\t\t\t \n                    \t}\n);  \nreq.write('Hello');\nreq.end('World');\n```\n\n\nGET request example :\n```javascript\nvar req = client.get(\n            {\n                path : '/',\n                url : '/',\n                port: 3000,\n                host: 'localhost'\n            },\n        \tfunction(response){\n                \tlogger.info(\"--- GET  RESPONSE --\");\n                \tresponse.once('data', function (chunk) {\n                    \t\tvar data = String.fromCharCode.apply(null, new Uint16Array(chunk));\n                    \t\tlogger.info(data);          \n                });    \n                                \n    }); \n    \nreq.on('error', function(err){\n      logger.error(err);\n });    \n    \n```\n\nPING example :\n\n```javascript\nclient.ping({\n                port: 3000,\n                host: 'localhost'\n                },\n                function(id){\n           \t\t// success callback\n                }\n    );\n```\n\nPUSH handler example :\n\n```javascript\nvar req = client.request(\n            {\n                method: 'GET',\n                path : '/',\n                url : '/',\n                port: 4000,\n                host: 'localhost',\n                pushcb : function(opt, originreq)\n                        {\n                           // application handling    \n                           // The client accepts the pushed data or not\n                            return {\n                                error : null,\n                                success : function(res){\n                                   //...\n                                }\n                            };\n                        }\n            },\n            function(response){\n                    //....\n                });   \n                \n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/wpc009/spdy-client.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.3"
}
